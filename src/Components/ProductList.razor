@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

@{
    var productsByType = ProductService.GetProducts().GroupBy(p => p.ProductType);
}
<div class="card-rows">
    @foreach (var group in productsByType)
    {
        <h3>@group.Key</h3> //Classifies the type of each group as the heading

        <div class="card-group">
            @foreach (var product in group)
            {
                <div class="card">
                    <div class="card-img" style="background-image: url('@product.Image');"></div>
                    <div class="card-body">
                        <h5 class="card-title">@product.Name/@product.Age</h5>
                        <h5 class="card-title">@product.Breed</h5>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">
                            <button @onclick="(e => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                More Info
                            </button>
                        </small>
                    </div>
                </div>
            }
        </div>
    }

</div>
<!--Adds the petinfo class to the card, giving it the same styling as the petinfo page.-->
@if(selectedProduct != null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header petinfo">
          <h5 class="modal-title" id="productTitle">@selectedProduct.Name</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body petinfo">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body petinfo">
                <p class="card-text">@selectedProduct.Description</p>
            </div>
          </div>
        </div>
        <div class="modal-footer petinfo">
                    @*Create a string to hold the vote count and vote label (e.g. "3 votes")*@
                    @{var voteString = @voteCount + " " + @voteLabel;

                        if (voteCount == 0)
                        {
                            voteString = "Be the first to vote!";
                        }

                        <span>@voteString</span>

                        for (int i = 1; i < 6; i++)
                        {
                            var currentStar = i;
                            var checkedText = "";
                            if (i <= currentRating)
                            {
                                checkedText = "checked";
                            }
                            <span class="fa fa-star @checkedText" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
        </div>

                        <div class="row petinfo">
                            <div class="col">
                                @{
                                    // First show all the existing comments
                                    foreach (var comment in selectedProduct.Comments)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                @comment.Comment
                                            </div>
                                        </div>
                                    }

                                    // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                    if (NewComment)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <input type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" value="@NewCommentText" />
                                                <button @onclick="(e => AddComment())" class="btn btn-success" data-toggle="modal">Save Comment</button>
                                            </div>
                                        </div>
                                    }

                                    // If this is not a new comment, then show the buttons for Adding comment and Close
                                    if (NewComment == false)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-primary">Add Comment</button>
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
      selectedProductId = productId;
      selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
      GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
      if(selectedProduct.Ratings == null)
      {
        currentRating = 0;
        voteCount = 0;
      }
      else
      {
        voteCount = selectedProduct.Ratings.Count();
        voteLabel = voteCount > 1 ? "Votes" : "Vote";
        currentRating = selectedProduct.Ratings.Sum() / voteCount;
      }

      System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
      System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
      ProductService.AddRating(selectedProductId, rating);
      SelectProduct(selectedProductId);
    }
    // New Comment Flag to show the input box or not
    bool NewComment = false;

    // Next Comment Text is what the comment text is
    string NewCommentText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddComment()
    {
        // Refactor to be a call to the middle tier
        // ProductService.AddCommentToProduct(selectedProduct, comment);


        // Add it to the Comment List
        selectedProduct.Comments.Add(new CommentModel() { Comment = NewCommentText });

        // Call for the Product to be saved
        ProductService.UpdateData(selectedProduct);

        // Set the NewComment flag to false to hide the input box
        NewComment = false;
    }


}
